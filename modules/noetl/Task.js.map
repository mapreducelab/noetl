{"version":3,"sources":["Task.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAI,cAAc,QAAQ,eAAR,CAAlB;IACI,OAAO,QAAQ,QAAR,CADX;IAEI,qBAFJ;;;;;;AAUA,IAAQ,gBAAgB,sBAAO,uBAAP,CAAxB;IACQ,SAAgB,sBAAO,OAAP,CADxB;;AAGA,IAAQ,OAAgB,MAAxB;;AACQ,QAAgB,OADxB;IAEQ,QAAgB,OAFxB;IAGQ,OAAgB,MAHxB;;;;;;;AAUA,OAAO,OAAP;AAAA;;AACI,oBAAc;AAAA;;AAAA,mHACD,SADC;;AAEV,cAAK,MAAL,IAAe,mBAAf;AACA,cAAK,aAAL,IAAsB,YAAM;AAAE,mBAAO,MAAK,KAAL,KAAe,SAAtB;AAAgC,SAA9D;AACA,YAAI;AACA,gBAAI,KAAK,MAAK,aAAL,GAAL,EAA8B,MAA9B,GAAuC,CAA3C,EAA8C;AAAA;AAC1C,0BAAK,MAAL,EAAa,GAAb,CAAiB,IAAjB,EAAuB,IAAI,IAAJ,CAAS,IAAT,EAAe,MAAK,aAAL,GAAf,CAAvB;AACA,wBAAI,gBAAgB,MAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,CAApB;AACA,yBAAK,MAAK,KAAL,CAAL,EAAkB,OAAlB,CAA0B,eAAO;AAC7B,8BAAK,MAAL,EAAa,GAAb,CAAiB,GAAjB,qCAA0B,IAA1B,iDAAkC,aAAlC,IAAiD,KAAjD,EAAwD,GAAxD;AACH,qBAFD;AAH0C;AAAA;AAAA;;AAAA;AAAA;AAAA,gCAMjC,KANiC;;AAOxC,gCAAI,WAAW,MAAM,CAAN,CAAf;gCAAyB,OAAO,MAAM,CAAN,CAAhC;gCAA0C,mBAAmB,KAAK,WAAlE;AACA,iCAAK,gBAAL,EAAuB,OAAvB,CAA+B,eAAO;AAAA;;AACnC,0DAAK,MAAL,EAAa,GAAb,CAAiB,QAAjB,GAA2B,QAA3B,0DAAuC,iBAAiB,GAAjB,CAAvC;AACG,iDAAiB,GAAjB,EAAsB,OAAtB,CAA8B,UAAC,IAAD,EAAO,CAAP,EAAU,GAAV,EAAkB;AAC9C,0CAAK,MAAL,EAAa,GAAb,CAAiB,IAAjB,EAAuB,WAAvB,CAAmC,QAAnC;AACA,0CAAK,MAAL,EAAa,GAAb,CAAiB,IAAjB,EAAuB,SAAvB,CAAiC,CAAC,GAAD,EAAM,EAAN,EAAU,IAAV,CAAe;AAAA,+CAAK,MAAM,GAAX;AAAA,qCAAf,IAAiC,IAAjC,GAAwC,GAAzE;AACH,iCAHC;AAIH,6BANH;AARwC;;AAM1C,wEAAkB,MAAK,MAAL,CAAlB,4GAAgC;AAAA;AAS/B;AAfyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB7C,aAhBD,MAgBO;AACH,sBAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACH;AACJ,SApBD,CAqBA,OAAO,CAAP,EAAU;AACF,oBAAQ,KAAR,CAAc,0BAAd,EAA0C,EAAE,OAA5C;AACP,SAvBD,SAuBW;AACP,oBAAQ,GAAR,CAAY,gBAAZ,EAA8B,MAAK,MAAL,CAA9B;AACH;AA7BS;AA8Bb;;AA/BL;AAAA;AAAA,4BAqCuB;AACf,mBAAO,KAAK,IAAL,EAAW,OAAX,IAAsB,SAA7B;AACH;AAvCL;AAAA;AAAA,4BAyCuB;AACf,mBAAO,KAAK,IAAL,EAAW,OAAX,IAAsB,SAA7B;AACH;AA3CL;AAAA;AAAA,+BAiCmB;AACX,sDAAW,IAAX,2CAAmB,SAAnB;AACH;AAnCL;AAAA;AAAA,EAAoC,WAApC","file":"Task.js","sourcesContent":["\"use strict\";\nvar ConfigEntry = require('./ConfigEntry'),\n    Step = require('./Step'),\n    keys = Object.keys;\n\n// www.noetl.io ////////////////////////////////////////////////////////////////////////////////////////////////////////\n// www.noetl.io //////////////// NoETL Task class //////////////////////////////////////////////////////////////////////\n// www.noetl.io ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\nconst   _getStepsRoot = Symbol(\"steps start reference\"),\n        _steps        = Symbol(\"steps\");\n\nconst   ROOT         =  \"root\", // root is not a step, but just a forkable entry point for the steps.\n        STEPS         = \"STEPS\",\n        START         = \"START\",\n        NEXT          = \"NEXT\";\n\n/**\n * @class\n * @classdesc Workflow Task's handler.\n * @extends ConfigEntry\n */\nmodule.exports = class Task extends ConfigEntry{\n    constructor() {\n        super(...arguments)\n        this[_steps] = new Map()\n        this[_getStepsRoot] = () => { return this[START] || undefined}\n        try {\n            if (keys(this[_getStepsRoot] () ).length > 0) {\n                this[_steps].set(ROOT, new Step(ROOT, this[_getStepsRoot]()))\n                let entryPathList = this.entryPath.split(':');\n                keys(this[STEPS]).forEach(key => {\n                    this[_steps].set(key, new Step(...entryPathList, STEPS, key))\n                });\n                for (let entry of this[_steps]) {\n                  let stepName = entry[0], step = entry[1], nextSuccessSteps = step.nextSuccess;\n                  keys(nextSuccessSteps).forEach(key => {\n                     this[_steps].get(stepName).setChild(...nextSuccessSteps[key])\n                        nextSuccessSteps[key].forEach((item, i, arr) => {\n                          this[_steps].get(item).setAncestor(stepName)\n                          this[_steps].get(item).setBranch(['0', ''].find(x => x === key) ? item : key)\n                      })\n                    })\n                }\n            } else {\n                throw new Error(\"Steps starting entry point doesn't exists\");\n            }\n        }\n        catch (e) {\n                console.error(\"Task initializing error \", e.message);\n        }  finally {\n            console.log(\"this[_steps]: \", this[_steps]);\n        }\n    }\n\n    static task () {\n        return new Task(...arguments)\n    }\n\n    get nextSuccess () {\n        return this[NEXT].SUCCESS || undefined;\n    }\n\n    get nextFailure () {\n        return this[NEXT].FAILURE || undefined;\n    }\n\n};\n\n//export {Task}\n"]}
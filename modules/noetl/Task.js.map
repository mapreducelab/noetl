{"version":3,"sources":["Task.es6"],"names":[],"mappings":"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","file":"Task.js","sourcesContent":["\"use strict\";\nvar ConfigEntry = require('./ConfigEntry'),\n    Step = require('./Step'),\n    keys = Object.keys;\n\n// www.noetl.io ////////////////////////////////////////////////////////////////////////////////////////////////////////\n// www.noetl.io //////////////// NoETL Task class //////////////////////////////////////////////////////////////////////\n// www.noetl.io ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\nconst _steps        = Symbol(\"steps\");\nconst _getStepsRoot = Symbol(\"retrieve the starting reference form task START\");\nconst _root         = \"root\"; // root is not a step, but just a forkable entry point for the steps.\n\n/**\n * @class\n * @classdesc Workflow Task's handler.\n * @extends ConfigEntry\n */\nmodule.exports = class Task extends ConfigEntry{\n    constructor() {\n        super(...arguments)\n        this[_steps] = new Map()\n        this[_getStepsRoot] = () => { return this.START || undefined}\n        if (keys(this[_getStepsRoot] () ).length > 0) {\n            this[_steps].set(_root, new Step(_root, this[_getStepsRoot]() ) )\n            console.log(\"this[_steps]\", this[_steps])\n        }\n        console.log(\"entryId\", this.entryPath)\n        let entryPathList = this.entryPath.split(':');\n        if (keys(this.STEPS).length > 0) {\n            keys(this.STEPS).forEach(key => {console.log(\"Task key: \", key); this[_steps].set(key,new Step(...entryPathList,\"STEPS\",key))});\n            keys(this[_steps]).forEach(key => {\n                let nextStep = this[_steps].get(key);\n                console.log(\"this[_steps].get(key).nextSuccess(): \",nextStep)\n            });\n        }\n        if(this[_steps].size - 1 > 0 && (keys(this.STEPS).length === this[_steps].size - 1)) {\n\n        }\n        console.log(\"this[_steps]: \", this[_steps])\n    }\n\n    static task () {\n        return new Task(...arguments)\n    }\n    get nextSuccess () {\n        return this.NEXT.SUCCESS || undefined;\n    }\n    get nextFailure () {\n        return this.NEXT.FAILURE || undefined;\n    }\n    *defineDependences (step,branch) {\n        let done = new Map();\n        for (let from of this[_steps].keys()) {\n            done.set(from, new Set());\n            for (let to of this[_steps].get(from).keys()) {\n                if (this.hasStep(from, to) && !done.get(from).has(to)) {\n                    done.get(from).add(to);\n                    yield [from, to, this[_steps].get(from).get(to)];\n                }\n            }\n        }\n    }\n\n\n\n\n};\n\n//export {Task}\n"]}
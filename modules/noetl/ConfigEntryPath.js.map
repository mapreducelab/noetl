{"version":3,"sources":["ConfigEntryPath.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAMA,OAAO,OAAP;AAEI,+BAAoB;AAAA;;AAAA;;AAAA,oCACoB,gBAAgB,kBAAhB,kCADpB;;AAAA;;AAAA,YACX,aADW;AAAA,YACG,aADH;;AAEhB,aAAK,cAAL,GAAsB,aAAtB;AACA,aAAK,cAAL,GAAsB,aAAtB;AACA,aAAK,kBAAL,GAA0B,YAAM;AAAE,mBAAO,MAAK,cAAL,IAAuB,SAA9B;AAAwC,SAA1E;AACA,aAAK,gBAAL,GAAwB,YAAM;AAAE,mBAAO,MAAK,cAAL,IAAuB,SAA9B;AAAwC,SAAxE;AACA,aAAK,IAAL,GAAY,SAAZ;AACH;;AATL;AAAA;AAAA,0BA0BwB,QA1BxB,EA0BkC;AAC1B,iBAAK,cAAL,GAAsB,QAAtB;AACH,SA5BL;AAAA,4BAgC0B;AAClB,mBAAO,KAAK,cAAL,IAAuB,SAA9B;AACH;AAlCL;AAAA;AAAA,0BA6BwB,QA7BxB,EA6BkC;AAC1B,iBAAK,cAAL,GAAsB,QAAtB;AACH,SA/BL;AAAA,4BAmC0B;AAClB,mBAAO,KAAK,cAAL,IAAuB,SAA9B;AACH;AArCL;AAAA;AAAA,0CAUoC;AAAA,8CAAN,IAAM;AAAN,oBAAM;AAAA;;AAC5B,sDAAW,eAAX,gBAA8B,IAA9B;AACH;AAZL;AAAA;AAAA,uCAa6D;AAAA,gBAArC,GAAqC,yDAA/B,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,CAA+B;AAAC,mBAAO,GAAP;AAAY;AAb1E;AAAA;;;;;;;;;;AAAA,6CAsBuC;AAAA,+CAAN,IAAM;AAAN,oBAAM;AAAA;;AAC/B,gBAAI,iBAAiB,SAAjB,cAAiB;AAAA,uBAAO,IAAI,MAAJ,IAAY,CAAZ,IAAiB,gBAAgB,YAAhB,GAA+B,OAA/B,CAAuC,GAAvC,IAA4C,CAAC,CAArE;AAAA,aAArB;gBAA6F,kBAAkB,eAAe,KAAK,CAAL,CAAf,IAA2B,CAAC,KAAK,KAAL,CAAW,CAAX,EAAc,IAAd,CAAmB,KAAK,CAAL,CAAnB,CAAD,EAA6B,KAAK,KAAL,CAAW,CAAX,EAAc,IAAd,CAAmB,GAAnB,CAA7B,CAA3B,GAAmF,CAAC,KAAK,IAAL,CAAU,GAAV,CAAD,EAAgB,KAAK,IAAL,CAAU,GAAV,CAAhB,CAAlM,C;AACA,mBAAO,eAAP;AACH;AAzBL;AAAA;AAAA","file":"ConfigEntryPath.js","sourcesContent":["\"use strict\";\n\n/**\n * ConfigEntryPath class creates an object that stores result of getConfigEntryPath.\n*/\n\nmodule.exports =\n    class ConfigEntryPath{\n    constructor(...keys){\n        let [confEntryName,confEntryPath] = ConfigEntryPath.getConfigEntryPath(...keys)\n        this._confEntryName = confEntryName\n        this._confEntryPath = confEntryPath\n        this.getConfigEntryName = () => { return this._confEntryName || undefined}\n        this.getConfEntryPath = () => { return this._confEntryPath || undefined}\n        this._sep = undefined\n    }\n    static configEntryPath(...keys) {\n        return new ConfigEntryPath(...keys)\n    }\n    static getDelimiter(sep = [' ',':','.',',',';','|','-']) {return sep;};\n\n    /**\n     * getConfigEntryPath method gets list of strings ['W','D','A'] and returns 'W:D:A' string.\n     * if first item is ':' or ',' or ';', like ['|','W','D','A'] the first item will be used as\n     * delimiter - returning 'W|D|A' string.\n     * @param [keys]\n     * @returns configEntryPath {object}\n     */\n    static getConfigEntryPath(...keys) {\n        let checkDelimiter = arg => arg.length==1 && ConfigEntryPath.getDelimiter().indexOf(arg)>-1, configEntryPath = checkDelimiter(keys[0])  ? [keys.slice(1).join(keys[0]),keys.slice(1).join(':')] : [keys.join(':'),keys.join(':') ]  // checkDelimiter returns true if separator exists as a first argument of configEntryPath function that returns array of \"Entry Path Name\" and \"Entry Path\"\n        return configEntryPath\n    }\n    set configEntryName(confName) {\n        this._confEntryName = confName\n    }\n    set configEntryPath(confPath) {\n        this._confEntryPath = confPath\n    }\n    get configEntryName() {\n        return this._confEntryName || undefined;\n    }\n    get configEntryPath() {\n        return this._confEntryPath || undefined;\n    }\n};\n\n"]}
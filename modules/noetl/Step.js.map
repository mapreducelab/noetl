{"version":3,"sources":["Step.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAI,cAAc,QAAQ,eAAR,CAAlB;;;;;;AAMA,IAAM,YAAiB,sBAAO,wBAAP,CAAvB;AACA,IAAM,SAAiB,sBAAO,oBAAP,CAAvB;AACA,IAAM,UAAiB,sBAAO,aAAP,CAAvB;AACA,IAAM,UAAgB,gBAAtB,C;;;;;;;AAOA,OAAO,OAAP;AAAA;;AACI,oBAAc;AAAA;;AAAA,mHACD,SADC;;AAEV,cAAK,SAAL,IAAkB,mBAAlB;AACA,cAAK,MAAL,IAAkB,mBAAlB;AACA,cAAK,OAAL,IAAkB,SAAlB;AACA,cAAK,OAAL,IAAkB,OAAlB;AACC,YAAI,UAAU,CAAV,MAAiB,MAArB,EAA6B;AAC1B,kBAAK,IAAL,GAAY,EAAC,WAAU,sBAAc,EAAd,EAAiB,UAAU,CAAV,CAAjB,CAAX,EAAZ;AACH;;AARS;AAUb;;AAXL;AAAA;AAAA,4BAe8B;AAAA;;AACtB,+BAAK,SAAL,GAAgB,GAAhB;AACH,SAjBL;AAAA,4BAwBmB;AACX,mBAAO,KAAK,SAAL,KAAmB,SAA1B;AACH;AA1BL;AAAA;AAAA,4BAkBwB;AAAA;;AAChB,4BAAK,MAAL,GAAa,GAAb;AACH,SApBL;AAAA,4BA2BgB;AACR,mBAAO,KAAK,MAAL,KAAgB,SAAvB;AACH;AA7BL;AAAA;AAAA,0BAqBe,MArBf,EAqBuB;AACf,iBAAK,OAAL,IAAgB,UAAU,SAA1B;AACH,SAvBL;AAAA,4BA8BiB;AACT,mBAAO,KAAK,OAAL,KAAiB,SAAxB;AACH;AAhCL;AAAA;AAAA,4BAiCuB;AACf,mBAAO,KAAK,MAAL,KAAgB,SAAvB;AACH;AAnCL;AAAA;AAAA,4BAoCuB;AACf,mBAAO,KAAK,IAAL,CAAU,OAAV,IAAqB,SAA5B;AACH;AAtCL;AAAA;AAAA,4BAuCiB;AACT,mBAAO,KAAK,IAAL,IAAa,SAApB;AACH;AAzCL;AAAA;AAAA,4BA0CoB;AACZ,mBAAO,KAAK,MAAL,IAAe,SAAtB;AACH;AA5CL;AAAA;AAAA,4BA6CoB;AACZ,mBAAO,KAAK,MAAL,IAAe,SAAtB;AACH;AA/CL;AAAA;AAAA,+BAYkB;AACV,sDAAW,IAAX,2CAAmB,SAAnB;AACH;AAdL;AAAA;AAAA,EAAoC,WAApC","file":"Step.js","sourcesContent":["\"use strict\";\nvar ConfigEntry = require('./ConfigEntry');\n\n// www.noetl.io ////////////////////////////////////////////////////////////////////////////////////////////////////////\n// www.noetl.io //////////////// NoETL Step class //////////////////////////////////////////////////////////////////////\n// www.noetl.io ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst _ancestor      = Symbol(\"list of incoming steps\");\nconst _child         = Symbol(\"list of next steps\");\nconst _branch        = Symbol(\"branch name\");\nconst _status       = \"status of step\" // [READY||RUNNING||WAITING||FINISHED||FAILED]\n\n/**\n * @class Step\n * @classdesc Workflow Step's handler.\n * @extends Task\n */\nmodule.exports = class Step extends ConfigEntry{\n    constructor() {\n        super(...arguments);\n        this[_ancestor] = new Set();\n        this[_child]    = new Set();\n        this[_branch]   = undefined;\n        this[_status]   = \"READY\"\n         if (arguments[0] === \"root\") {\n            this.NEXT = {\"SUCCESS\":Object.assign({},arguments[1])};\n        }\n\n    }\n    static step() {\n        return new Step(...arguments)\n    }\n    set ancestor(...ancestor) {\n        this[_ancestor].add(...ancestor);\n    }\n    set child(...child) {\n        this[_child].add(...child);\n    }\n    set branch(branch) {\n        this[_branch] = branch || undefined;\n    }\n    get ancestor() {\n        return this[_ancestor] || undefined;\n    }\n    get child() {\n        return this[_child] || undefined;\n    }\n    get branch() {\n        return this[_branch] || undefined;\n    }\n    get nextSuccess () {\n        return this[\"NEXT\"] || undefined;\n    }\n    get nextFailure () {\n        return this.NEXT.FAILURE || undefined;\n    }\n    get getCall(){\n        return this.CALL || undefined;\n    }\n    get getCursor (){\n        return this.CURSOR || undefined;\n    }\n    get getAction (){\n        return this.ACTION || undefined;\n    }\n\n    \n};\n\n\n//export  {Step}"]}